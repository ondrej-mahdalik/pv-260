name: Build API Server Docker image and deploy it on Staging server

on:
  push:
    branches: main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ vars.IMAGE_NAME }}

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USER }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6
      with:
        platforms: linux/amd64
        context: ./src
        file: ./src/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ vars.IMAGE_NAME }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build
    environment: staging
    runs-on: self-hosted
    steps:
      - name: Deploy the package on the Staging server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USER }} -p ${{ env.REGISTRY_PASSWORD }}
            docker pull ${{ env.REGISTRY }}/${{ vars.IMAGE_NAME }}
            docker stop ${{ vars.CONTAINER_NAME }} || true
            docker rm ${{ vars.CONTAINER_NAME }} || true
            docker run -d -p ${{ vars.CONTAINER_PORT }}:8080 --name ${{ vars.CONTAINER_NAME }} ${{ env.REGISTRY }}/${{ vars.IMAGE_NAME }}